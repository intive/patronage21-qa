// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestSharpProject.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Using PUT method on URL /api/users to edit User data")]
    public partial class UsingPUTMethodOnURLApiUsersToEditUserDataFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "IP2-185-API-editing-user-data.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Using PUT method on URL /api/users to edit User data", "Description", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "username",
                        "firstName",
                        "lastName",
                        "email",
                        "phoneNumber",
                        "gitHubUrl"});
            table1.AddRow(new string[] {
                        "Tom34",
                        "Tomasz",
                        "Nowak",
                        "tom@gmail.com",
                        "783984984",
                        "https://github.com/tom7u"});
#line 8
testRunner.Given("User created for testing purposes", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1_USER_EDIT_[/api/users]_[PUT]_IP2-89_editing_user_who_exists_in_the_database_suc" +
            "cess")]
        [NUnit.Framework.TestCaseAttribute("Wojti34", "Tomasz", "Nowak", "tom@gmail.com", "783984984", "https://github.com/tom7u", "200", "userName has been successfully changed", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Wojciech", "Nowak", "tom@gmail.com", "783984984", "https://github.com/tom7u", "200", "firstName has been successfully changed", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "Kowalski", "tom@gmail.com", "783984984", "https://github.com/tom7u", "200", "lasttName has been successfully changed", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "Nowak", "tomek89@gmail.com", "783984984", "https://github.com/tom7u", "200", "email has been successfully changed", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "Nowak", "tom@gmail.com", "689984984", "https://github.com/tom7u", "200", "phoneNumber has been successfully changed", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "Nowak", "tom@gmail.com", "783984984", "https://github.com/tomiii4", "200", "gitHubUrl has been successfully changed", null)]
        [NUnit.Framework.TestCaseAttribute("Piter89", "Piotr", "Mazurek", "piter@gmail.com", "689984984", "https://github.com/piter56", "200", "all data has been successfully changed", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Piotr", "Kowalski", "tom@gmail.com", "783984984", "https://github.com/tomiii4", "200", "firstName and lastName have been successfully changed", null)]
        public virtual void _1_USER_EDIT_ApiUsers_PUT_IP2_89_Editing_User_Who_Exists_In_The_Database_Success(string username, string firstName, string lastName, string email, string phoneNumber, string gitHubUrl, string code, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("username", username);
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("phoneNumber", phoneNumber);
            argumentsOfScenario.Add("gitHubUrl", gitHubUrl);
            argumentsOfScenario.Add("code", code);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1_USER_EDIT_[/api/users]_[PUT]_IP2-89_editing_user_who_exists_in_the_database_suc" +
                    "cess", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "phoneNumber",
                            "gitHubUrl"});
                table2.AddRow(new string[] {
                            string.Format("{0}", username),
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", phoneNumber),
                            string.Format("{0}", gitHubUrl)});
#line 14
testRunner.When("User sends a PUT request", ((string)(null)), table2, "When ");
#line hidden
#line 17
testRunner.Then(string.Format("The server returns status {0} and the message {1}", code, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "phoneNumber",
                            "gitHubUrl",
                            "code",
                            "message"});
                table3.AddRow(new string[] {
                            string.Format("{0}", username),
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", phoneNumber),
                            string.Format("{0}", gitHubUrl),
                            string.Format("{0}", code),
                            string.Format("{0}", message)});
#line 18
testRunner.And("JSON body should contain updated data", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2_USER_EDIT_[/api/users]_[PUT]_IP2-89_editing_user_who_exists_in_the_database_fai" +
            "l")]
        [NUnit.Framework.TestCaseAttribute("Tom34", "To", "Nowak", "tom@gmail.com", "783984984", "https://github.com/tom7u", "400", "firstName is too short", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasztomasztomasztomasz", "Nowak", "tom@gmail.com", "783984984", "https://github.com/tom7u", "400", "firstName is too long", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "No", "tom@gmail.com", "783984984", "https://github.com/tom7u", "400", "lastName is too short", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "Nowaknowaknowaknowakn", "tom@gmail.com", "783984984", "https://github.com/tom7u", "400", "lastName is too long", null)]
        [NUnit.Framework.TestCaseAttribute("To", "Tomasz", "Nowak", "tom@gmail.com", "783984984", "https://github.com/tom7u", "400", "userName is invalid", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "Nowak", "tomgmail.com", "783984984", "https://github.com/tom7u", "400", "email is invalid", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "Nowak", "tom@gmail.com", "78398", "https://github.com/tom7u", "400", "phoneNumber is too short", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "Nowak", "tom@gmail.com", "78398498456", "https://github.com/tom7u", "400", "phoneNumber is too long", null)]
        [NUnit.Framework.TestCaseAttribute("Tom34", "Tomasz", "Nowak", "tom@gmail.com", "783984984", "htts://github.com/tom7u", "400", "gitHubUrl is invalid", null)]
        public virtual void _2_USER_EDIT_ApiUsers_PUT_IP2_89_Editing_User_Who_Exists_In_The_Database_Fail(string username, string firstName, string lastName, string email, string phoneNumber, string gitHubUrl, string code, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("username", username);
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("phoneNumber", phoneNumber);
            argumentsOfScenario.Add("gitHubUrl", gitHubUrl);
            argumentsOfScenario.Add("code", code);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2_USER_EDIT_[/api/users]_[PUT]_IP2-89_editing_user_who_exists_in_the_database_fai" +
                    "l", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "phoneNumber",
                            "gitHubUrl"});
                table4.AddRow(new string[] {
                            string.Format("{0}", username),
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", phoneNumber),
                            string.Format("{0}", gitHubUrl)});
#line 36
testRunner.When("User sends a PUT request", ((string)(null)), table4, "When ");
#line hidden
#line 39
testRunner.Then(string.Format("The server returns status {0} and the message {1}", code, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "phoneNumber",
                            "gitHubUrl",
                            "code",
                            "message"});
                table5.AddRow(new string[] {
                            string.Format("{0}", username),
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", phoneNumber),
                            string.Format("{0}", gitHubUrl),
                            string.Format("{0}", code),
                            string.Format("{0}", message)});
#line 40
testRunner.And("JSON body should contain original data", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3_USER_EDIT_[/api/users]_[PUT]_IP2-89_editing_userName_to_one_that_already_exists" +
            "_in_the_databse")]
        public virtual void _3_USER_EDIT_ApiUsers_PUT_IP2_89_Editing_UserName_To_One_That_Already_Exists_In_The_Databse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3_USER_EDIT_[/api/users]_[PUT]_IP2-89_editing_userName_to_one_that_already_exists" +
                    "_in_the_databse", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "phoneNumber",
                            "gitHubUrl"});
                table6.AddRow(new string[] {
                            "<username>",
                            "<firstName>",
                            "<lastName>",
                            "<email>",
                            "<phoneNumber>",
                            "<gitHubUrl>"});
#line 59
testRunner.Given("Second user is created for testing purposes", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "phoneNumber",
                            "gitHubUrl"});
                table7.AddRow(new string[] {
                            "<username>",
                            "<firstName>",
                            "<lastName>",
                            "<email>",
                            "<phoneNumber>",
                            "<gitHubUrl>"});
#line 62
testRunner.When("First User sends a PUT request", ((string)(null)), table7, "When ");
#line hidden
#line 65
testRunner.Then("The server returns status 400 and the message \"userName is already used\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "phoneNumber",
                            "gitHubUrl"});
                table8.AddRow(new string[] {
                            "<username>",
                            "<firstName>",
                            "<lastName>",
                            "<email>",
                            "<phoneNumber>",
                            "<gitHubUrl>"});
#line 66
testRunner.And("JSON body should contain original data", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("4_ USER_EDIT_[/api/users]_[PUT]_IP2-89_editing_user_who_does_not_exist_in_the_dat" +
            "abase")]
        public virtual void _4_USER_EDIT_ApiUsers_PUT_IP2_89_Editing_User_Who_Does_Not_Exist_In_The_Database()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4_ USER_EDIT_[/api/users]_[PUT]_IP2-89_editing_user_who_does_not_exist_in_the_dat" +
                    "abase", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "phoneNumber",
                            "gitHubUrl"});
                table9.AddRow(new string[] {
                            "<username>",
                            "<firstName>",
                            "<lastName>",
                            "<email>",
                            "<phoneNumber>",
                            "<gitHubUrl>"});
#line 72
testRunner.Given("User who does not exist in the database", ((string)(null)), table9, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "phoneNumber",
                            "gitHubUrl"});
                table10.AddRow(new string[] {
                            "<username>",
                            "<firstName>",
                            "<lastName>",
                            "<email>",
                            "<phoneNumber>",
                            "<gitHubUrl>"});
#line 75
testRunner.When("User sends a PUT request", ((string)(null)), table10, "When ");
#line hidden
#line 78
testRunner.Then("The server returns status code 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
testRunner.And("JSON body is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
