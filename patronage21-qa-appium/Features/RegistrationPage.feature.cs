// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace patronage21_qa_appium.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RegistrationPage")]
    [NUnit.Framework.CategoryAttribute("registration")]
    public partial class RegistrationPageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "registration"};
        
#line 1 "RegistrationPage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RegistrationPage", "\tNew user wants to be able to register an account\r\n\tto apply for the Patronative " +
                    "program", ProgrammingLanguage.CSharp, new string[] {
                        "registration"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 8
 testRunner.Given("User is on Registration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("REGISTRATION_PAGE_1_IP2-261_registration_page_displayed_correctly")]
        public virtual void REGISTRATION_PAGE_1_IP2_261_Registration_Page_Displayed_Correctly()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("REGISTRATION_PAGE_1_IP2-261_registration_page_displayed_correctly", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 12
 testRunner.Then("User sees \"Registration\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("REGISTRATION_PAGE_2_IP2-261_registration_is_possible_after_filling_in_the_form_co" +
            "rrectly")]
        public virtual void REGISTRATION_PAGE_2_IP2_261_Registration_Is_Possible_After_Filling_In_The_Form_Correctly()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("REGISTRATION_PAGE_2_IP2-261_registration_is_possible_after_filling_in_the_form_co" +
                    "rrectly", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "surname",
                            "phone",
                            "password",
                            "password confirm",
                            "Github"});
                table1.AddRow(new string[] {
                            "Jan",
                            "Kowalski",
                            "123456789",
                            "Qwerty+8",
                            "Qwerty+8",
                            "https://www.github.com/jan-kowalski"});
#line 16
 testRunner.When("User completes form correctly", ((string)(null)), table1, "When ");
#line hidden
#line 19
 testRunner.Then("User \"can\" sign up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.And("User sees \"Email verification\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("REGISTRATION_PAGE_3_IP2-261_registration_form_has_proper_validation")]
        [NUnit.Framework.TestCaseAttribute("name", "correctly", "Jan", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("name", "with no data", "", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("name", "too short", "J", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("name", "too long", "JanJanJanJanJanJanJanJanJanJanJa", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("name", "with digit", "Jan1", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("name", "with special character", "Jan@", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("surname", "correctly", "Kowalski", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("surname", "with no data", "", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("surname", "too short", "K", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("surname", "too long", "KowalskiKowalskiKowalskiKowalski", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("surname", "with digit", "Kowalski1", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("surname", "with special character", "Kowalski#", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("email", "correctly", "jankowalski@gmail.com", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("email", "with no data", "", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("email", "with no @", "jankowalskigmail.com", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("email", "with no sign before @", "jankowalskigmailcom", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("email", "with no . after @", "jankowalski@gmailcom", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("email", "with no data before . after @", "jankowalski@.com", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("email", "with no data after . after @", "jankowalski@gmail.", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("phone", "correctly", "123456789", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("phone", "with no data", "", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("phone", "too short", "12345678", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("phone", "too long", "1234567890", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("phone", "with letter", "12345678a", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("technologies", "correctly", "1", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("technologies", "with too few selections", "0", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("technologies", "with to many selections", "4", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("login", "correctly", "JanKowalski1", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("login", "with no data", "", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("login", "too short", "J", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("login", "too long", "JanKowalski1JanKowalski1", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("login", "with special character", "JanKowalski1JanKowalski1#", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("password", "correctly", "Qwerty+8", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("password", "with no data", "", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("password", "too short", "Qwert+5", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("password", "too long", "Qwertyuiopasdfghjkl+1", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("password", "with no uppercase letter", "qwerty+8", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("password", "with no digit", "qwertyu+", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("password", "with no special character", "qwertyu8", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("password confirm", "correctly", "Qwerty+8", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("password confirm", "with wrong password", "Qwerty+7", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "correctly", "https://www.github.com/jan-kowalski", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "with no https", "www.github.com/jan-kowalski", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "with no www", "https://github.com/jan-kowalski", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "with no github.com", "https://www./jan-kowalski", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "with no username", "https://www.github.com/", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "with too long username", "https://www.github.com/jan-kowalskijan-kowalskijan-kowalskijank", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "with non-alphanumeric character in username", "https://www.github.com/jankowalski@#%", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "with hyphen at start in username", "https://www.github.com/-jan-kowalski", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "with hyphen at end in username", "https://www.github.com/jan-kowalski-", "NOK", null)]
        [NUnit.Framework.TestCaseAttribute("consents", "correctly", "2", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("consents", "by leave required", "1", "NOK", null)]
        public virtual void REGISTRATION_PAGE_3_IP2_261_Registration_Form_Has_Proper_Validation(string element, string inAWay, string data, string valid, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("element", element);
            argumentsOfScenario.Add("in a way", inAWay);
            argumentsOfScenario.Add("data", data);
            argumentsOfScenario.Add("valid", valid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("REGISTRATION_PAGE_3_IP2-261_registration_form_has_proper_validation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 24
 testRunner.When(string.Format("User completes \"{0}\" \"{1}\" with \"{2}\"", element, inAWay, data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then(string.Format("User is informed if \"{0}\" is \"{1}\"", element, valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("REGISTRATION_PAGE_4_IP2-261_registration_is_not_possible_after_filling_in_the_for" +
            "m_incorrectly")]
        [NUnit.Framework.TestCaseAttribute("name", "with no data", "", null)]
        [NUnit.Framework.TestCaseAttribute("surname", "with no data", "", null)]
        [NUnit.Framework.TestCaseAttribute("email", "with no data", "", null)]
        [NUnit.Framework.TestCaseAttribute("phone", "with no data", "", null)]
        [NUnit.Framework.TestCaseAttribute("technologies", "with too few selections", "", null)]
        [NUnit.Framework.TestCaseAttribute("login", "with no data", "", null)]
        [NUnit.Framework.TestCaseAttribute("password", "with no data", "", null)]
        [NUnit.Framework.TestCaseAttribute("confirm password", "with wrong password", "Qwerty+7", null)]
        [NUnit.Framework.TestCaseAttribute("Github", "with no https", "www.github.com/jan-kowalski", null)]
        [NUnit.Framework.TestCaseAttribute("consent", "by leave required", "", null)]
        public virtual void REGISTRATION_PAGE_4_IP2_261_Registration_Is_Not_Possible_After_Filling_In_The_Form_Incorrectly(string element, string inAWay, string data, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("element", element);
            argumentsOfScenario.Add("in a way", inAWay);
            argumentsOfScenario.Add("data", data);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("REGISTRATION_PAGE_4_IP2-261_registration_is_not_possible_after_filling_in_the_for" +
                    "m_incorrectly", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "surname",
                            "phone",
                            "password",
                            "passwordConfirm",
                            "Github"});
                table2.AddRow(new string[] {
                            "Jan",
                            "Kowalski",
                            "123456789",
                            "Qwerty+8",
                            "Qwerty+8",
                            "https://www.github.com/jan-kowalski"});
#line 84
 testRunner.When("User completes form correctly", ((string)(null)), table2, "When ");
#line hidden
#line 87
 testRunner.And(string.Format("User completes \"{0}\" \"{1}\" with \"{2}\"", element, inAWay, data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.Then("User \"can not\" sign up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("REGISTRATION_PAGE_5_IP2-261_registration_is_not_possible_with_element_which_was_u" +
            "sed_before")]
        [NUnit.Framework.TestCaseAttribute("email", null)]
        [NUnit.Framework.TestCaseAttribute("login", null)]
        public virtual void REGISTRATION_PAGE_5_IP2_261_Registration_Is_Not_Possible_With_Element_Which_Was_Used_Before(string element, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("element", element);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("REGISTRATION_PAGE_5_IP2-261_registration_is_not_possible_with_element_which_was_u" +
                    "sed_before", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "surname",
                            "phone",
                            "password",
                            "passwordConfirm",
                            "Github"});
                table3.AddRow(new string[] {
                            "Jan",
                            "Kowalski",
                            "123456789",
                            "Qwerty+8",
                            "Qwerty+8",
                            "https://www.github.com/jan-kowalski"});
#line 105
 testRunner.When("User signs up", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "surname",
                            "phone",
                            "password",
                            "passwordConfirm",
                            "Github"});
                table4.AddRow(new string[] {
                            "Jan",
                            "Kowalski",
                            "123456789",
                            "Qwerty+8",
                            "Qwerty+8",
                            "https://www.github.com/jan-kowalski"});
#line 108
 testRunner.And(string.Format("User signs up again with the same \"{0}\"", element), ((string)(null)), table4, "And ");
#line hidden
#line 111
 testRunner.Then(string.Format("User is informed if \"{0}\" is \"repeated\"", element), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
